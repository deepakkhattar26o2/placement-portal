generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  password            String
  name                String           @unique
  about               String?
  website             String?
  has_logo_attachment Boolean          @default(false)
  role                Role             @default(COMPANY)
  PlacementDrive      PlacementDrive[]
  created_at          DateTime         @default(now())
}

model PlacementDrive {
  id                   Int            @id @default(autoincrement())
  companyId            Int?
  eligibility_criteria String
  batch_requried       Int
  type_of_drive        String
  date_of_drive        String
  positions            String[]
  stream_required      String[]
  job_profile          String
  job_location         String
  pay_package          String
  bond                 String?
  skills_required      String[]
  placement_process    String
  Company              Company?       @relation(fields: [companyId], references: [id])
  StudentDrive         StudentDrive[]
  created_at           DateTime       @default(now())
}

model StudentDrive {
  id                Int            @id @default(autoincrement())
  student_id        Int
  selected_resume   String
  selected_position String
  drive_id          Int
  created_at        DateTime       @default(now())
  PlacementDrive    PlacementDrive @relation(fields: [drive_id], references: [id])
  User              User           @relation(fields: [student_id], references: [id])
}

model User {
  id                       Int            @id @default(autoincrement())
  university_email         String         @unique
  first_name               String
  last_name                String
  password                 String
  uid                      String         @unique
  batch                    Int?
  course                   String?
  stream                   String?
  has_gap_year             Boolean?
  personal_email           String?        @unique
  contact_number           String?
  alternate_contact_number String?
  current_address          String?
  permanent_address        String?
  current_cgpa             Float?
  matric_result            Float?
  hsc_result               Float?
  number_of_backlogs       Int?
  has_matric_attachment    Boolean        @default(false)
  has_hsc_attachment       Boolean        @default(false)
  has_resume1_attachment   Boolean        @default(false)
  has_resume2_attachment   Boolean        @default(false)
  has_resume3_attachment   Boolean        @default(false)
  has_pfp_attachment       Boolean        @default(false)
  role                     Role           @default(USER)
  created_at               DateTime       @default(now())
  StudentDrive             StudentDrive[]
}

enum Role {
  USER
  COMPANY
}
